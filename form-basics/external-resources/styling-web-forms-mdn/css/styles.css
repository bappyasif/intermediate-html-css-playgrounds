/* we prepare by defining our @font-face rules, and all the basic styles set on the <body> and <form> elements */
@font-face {
    font-family: 'handwriting';
    src: url('../fonts/journal-webfont.woff2') format('woff2'),
        url('../fonts/journal-webfont.woff') format('woff');
    font-weight: normal;
    font-style: normal;
}

@font-face {
    font-family: 'typewriter';
    src: url('../fonts/veteran_typewriter-webfont.woff2') format('woff2'),
        url('../fonts/veteran_typewriter-webfont.woff') format('woff');
    font-weight: normal;
    font-style: normal;
}

body {
    font: 1.3rem sans-serif;
    padding: 0.5em;
    margin: 0;
    background: #222;
}

form {
    position: relative;
    width: 740px;
    height: 498px;
    margin: 0 auto;
    padding: 1em;
    box-sizing: border-box;
    background: url(../postcard.jpg) !important;

    /* we create our grid */
    display: grid;
    grid-gap: 20px;
    grid-template-columns: repeat(2, 1fr);
    grid-template-rows: 10em 1em 1em 1em;
}

/* Using this we can easily position our elements, including the title and all the form elements */
h1 {
    font: 1em "typewriter", monospace;
    align-self: end;
}

#message {
    grid-row: 1 / 5;
}

#from,
#reply {
    display: flex;
}

/* let's ensure that the <label>s are given the right font */
label {
    font: .8em "typewriter", sans-serif;
}

/* text fields require some common rules. In other words, we remove their borders and backgrounds, and redefine their padding and margin */
input,
textarea {
    font: 1.4em/1.5em "handwriting", cursive, sans-serif;
    border: none;
    padding: 0 10px;
    margin: 0;
    width: 80%;
    background: none;
}

/* When one of these fields gains focus, we highlight them with a light grey, transparent, background (it is always important to have focus style, for usability and keyboard accessibility) */
input:focus,
textarea:focus {
    background: rgba(0, 0, 0, .1);
    border-radius: 5px;
}

/* While our design is a fixed-size design, and we could use the resize property to prevent users from resizing our multi-line text field, it is best to not prevent users from resizing a textarea if they so choose */
/* overflow property is used to make the field render more consistently across browsers. Some browsers default to the value auto, while some default to the value scroll. In our case, it's better to be sure every one will use auto */
textarea {
    display: block;

    padding: 10px;
    margin: 10px 0 0 -10px;
    width: 100%;
    height: 90%;

    border-right: 1px solid;

    /* resize  : none; */
    overflow: auto;
}

/* <button> element is really convenient to style with CSS; you can do whatever you want, even using pseudo-elements */
button {
    padding: 5px;
    font: bold .6em sans-serif;
    border: 2px solid #333;
    border-radius: 5px;
    background: none;
    cursor: pointer;
    transform: rotate(-1.5deg);
}

button:after {
    content: " >>>>";
}

button:hover,
button:focus {
    outline: none;
    background: #000;
    color: #FFF;
}